#+TITLE: hyeondobin's Emacs Config

* Initialization
** Package sources and init

Add MELPA and the https version of elpa to the package sources,
then initialize.

This should preferrably be done in the init-file,
before this file is loaded, to allow for byte-compiling.

#+begin_src emacs-lisp :tangle no
  (require 'package)
  (setq-default package-archives
                '(("gnu" . "https://elpa.gnu.org/packages/")
                  ("melpa" . "https://melpa.org/packages/")))

  (setq-default package-enable-at-startup nil)
  (package-initialize)
#+end_src

** Set up use-package, install if missing

use-package is a handy macro for keeping track of installed
packages and installing them if they're missing. It also structures
configuration of the package and can defer loading until the
package is actually used.

This should preferrably be done in the init-file,
before this file is loaded, to allow for byte-compiling.

#+begin_src emacs-lisp :tangle no

  (unless (package-installed-p 'use-package)
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))

  (require 'use-package)

#+end_src


** CL

Require cl for extended functionality from common lisp used in
various places.

#+begin_src emacs-lisp :tangle no

  (use-package cl)

#+end_src

* Utils

** Undo-tree

#+begin_src emacs-lisp :tangle yes

(use-package undo-tree
  :ensure t
  :demand
  :bind ("C-M--" . undo-tree-switch-branch)
  :config (global-undo-tree-mode))

#+end_src

** Multiple cursors

#+begin_src emacs-lisp :tangle yes

(defvar multiple-cursors-keymap (make-sparse-keymap))

(use-package multiple-cursors
  :ensure t
  :bind-keymap ("C-t" . multiple-cursors-keymap)
  :bind (:map multiple-cursors-keymap
              ("C-s" . mc--mark-symbol-at-point)
              ("C-w" . mark-word)
              ("C-n" . mc/mark-next-like-this)
              ("C-p" . mc/mark-previous-like-this)
              ("n" . mc/mark-next-like-this-symbol)
              ("p" . mc/mark-previous-like-this-symbol)
              ("a" . 'mc/mark-all-like-this)
              ("C-a" . 'mc/edit-lines)))

#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :bind (("C-M-g" . magit-file-dispatch)
         ("C-c g" . magit-status))
  :config (require 'projectile))

#+end_src

** vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :ensure t)

#+end_src

* Behaviour
** Paste at point with middle-click

Instead of pasting the content to where the mouse points, paste it where the point currently is.

#+begin_src emacs-lisp :tangle yes
  (setq mouse-yank-at-point t)
#+end_src

** Disable tool bar and menu bar and scroll bar

#+begin_src emacs-lisp :tangle yes
  (if (display-graphic-p)
  (tool-bar-mode 0))
  (if (display-graphic-p)
  (scroll-bar-mode -1))
#+end_src

** Enable electric pairs
#+begin_src emacs-lisp :tangle yes
  (electric-pair-mode)
#+end_src

** Disable bell

Disable the annoying beeping sound emacs makes
#+begin_src emacs-lisp :tangle yes
  (setq-default ring-bell-function 'ignore)
#+end_src

** Truncate lines

Disable line wrapping.

#+begin_src emacs-lisp :tangle yes

  (setq-default truncate-lines t)

#+end_src

** Always use space instead of tabs

Always indent using space instead of tabs

#+begin_src emacs-lisp :tangle yes

  (setq-default indent-tabs-mode nil)

#+end_src

** Backup and auto-save files

#+begin_src emacs-lisp :tangle yes

  ;; don't clobber symlinks
  (setq backup-by-copying t)

  ;; don't litter my fs tree
  (setq backup-directory-alist
        '(("." . "~/.config/emacs/backups")))

  ;; use versioned backups
  (setq delete-old-versions t)
  (setq kept-new-versions 6)
  (setq kept-old-versions 2)
  (setq version-control t)

  (let ((dir "~/.config/emacs/auto-saves/"))
    (unless (file-directory-p dir)
    (mkdir dir))
    (setq auto-save-file-name-transforms
          `((".*" ,dir t))))

#+end_src

** Prettify symbols

#+begin_src emacs-lisp :tangle yes

  (use-package prog-mode
    :config
    (global-prettify-symbols-mode 1)
    (setq prettify-symbols-unprettify-at-point 'right-edge))

#+end_src

** Enable region casing

Enable the normally disabled upcase- and downcase-region functions.

#+begin_src emacs-lisp :tangle yes

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

#+end_src

** Scrolling

   Emacs normally scrolls half a page when you reach the bottom. This
   feels jerky and a bit confusing. Mouse wheel scrolling is also way
   too agressive.

     #+begin_src emacs-lisp :tangle yes

     ;; scroll one line at a time (less "jumpy" than defaults)

     (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; three line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-conservatively 101) ;; keyboard scroll one line at a time

     ;; (use-package smooth-scrolling
     ;;   :ensure t
     ;;   :demand
     ;;   :config
     ;;   (progn
     ;;     (setq-default smooth-scroll-margin 2)
     ;;     (smooth-scrolling-mode 1)))

   #+end_src

** Beginning of line

   C-a is revised to go to first char of the line, ignoring initial
   whitespace and on second run go to the real begining of the line.

   #+begin_src emacs-lisp :tangle yes

     (defun smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     ;; remap C-a to `smarter-move-beginning-of-line'
     (global-set-key [remap move-beginning-of-line]
                     'smarter-move-beginning-of-line)

   #+end_src

** Disable the start screen

   #+begin_src emacs-lisp :tangle yes

     (setq-default inhibit-startup-screen t)

   #+end_src

** Set org-mode as the default mode for the scratch buffer

   #+begin_src emacs-lisp :tangle no

     (setq-default initial-major-mode 'org-mode)

   #+end_src

** Highlight current line

   #+begin_src emacs-lisp :tangle no

     (global-hl-line-mode 1)

   #+end_src

** Always close temporary buffers

   Close the buffer when quit-window is called, instead of burying
   it. This applies to for example help buffers, debug buffer, etc.

   #+begin_src emacs-lisp :tangle yes

     (defun quit-window (&optional kill window)
       "Quit WINDOW and kill the buffer instead of burying it,
     regardless of the value of `kill'.

     This calls the function `quit-restore-window' to delete WINDOW or
     show some other buffer in it.  See Info node `(elisp) Quitting
     Windows' for more details.

     The functions in `quit-window-hook' will be run before doing
     anything else."
       (interactive "P")
       ;; Run the hook from the buffer implied to get any buffer-local
       ;; values.
       (with-current-buffer (window-buffer (window-normalize-window window))
         (run-hooks 'quit-window-hook))
       (quit-restore-window window 'kill))

   #+end_src

** Winner

   Enable winner-mode which lets us undo and redo window configuration
   changes with C-c <left> (undo) and C-c <right> (redo).

   #+begin_src emacs-lisp :tangle yes

     (when (fboundp 'winner-mode)
       (winner-mode 1))

   #+end_src

** Projectile

   #+begin_src emacs-lisp :tangle yes

     (use-package projectile
       :ensure t
       :bind-keymap ("C-c p" . projectile-command-map)
       :config (progn
                 (setq projectile-completion-system 'ivy)
                 (projectile-mode 1)
                 (setq magit-repository-directories
                       (mapcar (lambda (dir)
                                 (cons dir 0))
                               (mapcar #'directory-file-name
                                       (cl-remove-if-not (lambda (project)
                                                           (file-exists-p (concat project "/.git")))
                                                         (projectile-relevant-known-projects)))))))

   #+end_src
** Ivy

   #+begin_src emacs-lisp :tangle yes

     (use-package ivy
       :ensure t
       :demand
       :bind (([remap switch-to-buffer] . ivy-switch-buffer)
              ([remap list-buffers] . ivy-switch-buffer)
              :map ivy-minibuffer-map
              ([remap ivy-partial-or-done] . ivy-alt-done)
              ("C-<tab>" . ivy-insert-current)
              ("C-<return>" . ivy-immediate-done))
       :config
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-wrap t)
       (setq ivy-height 20)
       (setq ivy-initial-inputs-alist nil)
       (ivy-mode 1))

     (use-package swiper
       :ensure t
       :bind (([remap isearch-forward] . swiper)
              ([remap isearch-backward] . swiper)
              ([remap isearch-forward-regexp] . swiper-all)
              ([remap isearch-backward-regexp] . swiper-all)))

     (use-package counsel
       :ensure t
       :demand
       :bind (([remap find-file] . counsel-find-file)
              ([remap execute-extended-command] . counsel-M-x)
              ([remap describe-function] . counsel-describe-function)
              ([remap describe-variable] . counsel-describe-variable)
              ([remap find-library] . counsel-find-library)
              ("C-c r" . counsel-rg)
              ("M-y" . counsel-yank-pop)))

     (use-package ivy-rich
       :ensure t
       :demand
       :config (ivy-rich-mode 1))

     (use-package ivy-xref
       :ensure t
       :commands (ivy-xref-show-defs ivy-xref-show-xrefs)
       :init
       (when (>= emacs-major-version 27)
         (setq xref-show-definitions-function #'ivy-xref-show-defs))
       (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

   #+end_src

** which-key

   #+begin_src emacs-lisp :tangle yes

     (use-package which-key
       :ensure
       :demand
       :config (which-key-mode 1))

   #+end_src

** Clean up trailing whitespace

   #+begin_src emacs-lisp :tangle yes

     (add-hook 'before-save-hook 'whitespace-cleanup)

   #+end_src

** Increase number of recent files

   #+begin_src emacs-lisp :tangle yes

     (setq recentf-max-saved-items 2000)

   #+end_src

* Programming
** Highlight parentheses

   #+begin_src emacs-lisp :tangle yes

     (show-paren-mode 1)

   #+end_src

** Highlight symbol

   #+begin_src emacs-lisp :tangle yes

     (use-package highlight-symbol
       :ensure t
       :hook (((python-mode emacs-lisp-mode nix-mode) . highlight-symbol-mode)
              ((python-mode emacs-lisp-mode nix-mode) . highlight-symbol-nav-mode))
       :config (progn (highlight-symbol-nav-mode)
                      (setq highlight-symbol-idle-delay 0.5)
                      (setq highlight-symbol-highlight-single-occurrence nil)
                      (set-face-attribute 'highlight-symbol-face nil :background "dark cyan")))

   #+end_src

** Flycheck

   Flycheck is a modern on-the-fly syntax checking extension for GNU
   Emacs, intended as replacement for the older Flymake extension
   which is part of GNU Emacs.

   #+begin_src emacs-lisp :tangle yes

     (use-package flycheck
       :ensure t
       :demand
       :config (progn (global-flycheck-mode)
                      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
                      (setq-default flycheck-idle-change-delay 2)))

   #+end_src

   Show errors under point in pos-tip popups.

   #+begin_src emacs-lisp :tangle yes

     (use-package flycheck-pos-tip
       :ensure t
       :commands flycheck-pos-tip-mode
       :init (with-eval-after-load 'flycheck
               (flycheck-pos-tip-mode))
       :config (setq flycheck-pos-tip-timeout -1))

   #+end_src




** Company

   Company is a text completion framework for Emacs. The name stands
   for "complete anything". It uses pluggable back-ends and front-ends
   to retrieve and display completion candidates.

   #+begin_src emacs-lisp :tangle yes

     (use-package company
       :ensure t
       :demand
       :bind (:map company-active-map
                   ("<tab>" . company-complete-selection)
                   ("<return>" . newline))
       :config (progn (add-hook 'after-init-hook 'global-company-mode)
                      (setq company-idle-delay 0.2)
                      (setq tab-always-indent 'complete)))

   #+end_src

   #+begin_src emacs-lisp :tangle yes

     (use-package company-quickhelp
       :ensure t
       :bind (:map company-active-map
                   ("C-c h" . company-quickhelp-manual-begin))
       :config (progn (company-quickhelp-mode 1)
                      (setq company-quickhelp-delay nil)))

   #+end_src

** Paredit

   A really nice navigation and simple refactoring mode for lisp-like
   languages. [[http://pub.gajendra.net/src/paredit-refcard.pdf][Keybind reference card]].

   #+begin_src emacs-lisp :tangle no

     (use-package paredit-mode
       :ensure paredit
       :hook (emacs-lisp-mode eval-expression-minibuffer-setup ielm-mode lisp-mode lisp-interaction-mode scheme-mode))

   #+end_src


** lsp-mode

   #+BEGIN_SRC emacs-lisp :tangle yes

     (use-package lsp-mode
       :ensure
       :bind-keymap ("M-l" . lsp-command-map)
       :hook (lsp-mode . (lambda ()
                           (let ((lsp-keymap-prefix "M-l"))
                             (lsp-enable-which-key-integration))))
       :commands (lsp lsp-deferred)
       :hook ((python-mode go-mode elixir-mode) . lsp-deferred)
       :config (setq lsp-elixir-server-command '("elixir-ls")))

     (use-package lsp-ui
       :ensure
       :commands lsp-ui-mode)

     (use-package lsp-ivy
       :ensure
       :commands lsp-ivy-workspace-symbol)

   #+END_SRC


** nix-mode

   Major mode for editing nix language files.

   #+begin_src emacs-lisp :tangle yes

     (use-package nix-mode
       :ensure t
       :mode "\\.nix\\'"
       :config (setq nix-indent-function 'smie-indent-line))

   #+end_src

** direnv

   #+BEGIN_SRC emacs-lisp :tangle yes

     (use-package direnv
       :ensure t
       :demand
       :config (progn
                 (direnv-mode)))

   #+END_SRC

* Data
** Org-mode

   #+begin_src emacs-lisp :tangle yes

     (use-package org
       :ensure nil
       :commands org-mode
       :bind (("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ("C-c l" . org-store-link)
              ([remap org-return] . org-return-indent)
              :map org-mode-map
              ([C-right] . org-demote-subtree)
              ([C-left] . org-promote-subtree))
       :config (progn
                 ;; Increase calculator precision.
                 (defvar org-calc-default-modes '(calc-internal-prec 24
                                                  calc-float-format (float 24)
                                                  calc-angle-mode deg
                                                  calc-prefer-frac nil
                                                  calc-symbolic-mode nil
                                                  calc-date-format (YYYY "-" MM "-" DD " " Www (" " hh ":" mm))
                                                  calc-display-working-message t))
                 (setq org-agenda-files '("~/org/work.org"
                                          "~/org/home.org"))
                 (setq org-default-notes-file (concat org-directory "/notes.org"))
                 (setq org-log-done t)
                 (setq org-agenda-todo-list-sublevels nil)

                 (setq ;;org-startup-indented t
                       ;;org-indent-mode-turns-off-org-adapt-indentation nil
                       org-odd-levels-only t
                       ;; org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package
                       org-ellipsis " ↓ " ;; folding symbol
                       org-pretty-entities t
                       org-hide-emphasis-markers t
                       ;; show actually italicized text instead of /italicized text/
                       org-agenda-block-separator ""
                       org-fontify-whole-heading-line t
                       org-fontify-done-headline t
                       org-fontify-quote-and-verse-blocks t)

                 ;; Highlight code in native languages in code blocks.
                 (setq org-src-fontify-natively t)
                 (push '("" "xcolor" nil) org-latex-default-packages-alist)
                 (setcar (seq-find (lambda (val)
                                     (string-equal (cadr val) "hyperref"))
                                   org-latex-default-packages-alist)
                         "pdfborderstyle={/S/U/W 0.5},urlbordercolor=blue")))

     (use-package org-bullets
       :ensure t
       :hook (org-mode . org-bullets-mode))

   #+end_src
